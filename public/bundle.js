!function(t){function e(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var n={};e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e,n){"use strict";n(2),n(1)},function(t,e,n){"use strict";$(function(){$("#landing-carousel").carousel(),$("#reviews-carousel").carousel()})},function(t,e,n){"use strict";({init:function(){this.cacheDOM(),this.bindEvent()},cacheDOM:function(){this.top=$(".top"),$(".schedule").length&&(this.target=$(".schedule").offset().top,this.timeout=null)},bindEvent:function(){$(window).scroll(this.listenForScroll.bind(this)),this.top.on("click",this.handleScrollToTop.bind(this))},handleScrollToTop:function(){window.pageXOffset=0,window.pageXOffset=0},listenForScroll:function(){var t=this;this.timeout||(this.timeout=setTimeout(function(){clearTimeout(t.timeout),t.timeout=null,$(window).scrollTop()>=t.target?t.top.removeClass("hidden").addClass("visible"):t.top.removeClass("visible").addClass("hidden")},250))}}).init()},function(t,e,n){t.exports=n(0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,